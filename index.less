@import 'stylesheets/syntax-variables.less';

// Editor interface

.editor-colors,
:host {
   background-color: @syntax-background-color;

   // excludes input text in find/replace, etc.
   :not(.editor--private.mini) {
      color: @syntax-text-color;
   }
}

.editor,
:host {

   .wrap-guide {
      background-color: @syntax-wrap-guide-color;
   }

   .indent-guide {
      color: @syntax-indent-guide-color;
   }

   .invisible,
   .invisible-character {
      color: @syntax-invisible-character-color;
   }

   .gutter {
      background-color: @syntax-gutter-background-color;
      color: @syntax-gutter-text-color;

      .line-number {

         &.cursor-line {
            background-color: @syntax-gutter-background-color-selected;
            color: @syntax-gutter-text-color-selected;
         }

         &.git-line-added {
            border-left-color: @syntax-color-added;
         }

         &.git-line-modified {
            border-left-color: @syntax-color-modified;
         }

         &.git-line-removed:before {
            border-left-color: @syntax-color-removed;
         }
      }
   }

   .gutter .line-number.folded,
   .gutter .line-number:after,
   .fold-marker:after {
      color: @white;
   }

   .cursor {
      border-left: 2px solid @syntax-cursor-color;
   }

   .cursor-line {
      background-color: transparent;
   }

   .highlight.selection .region {
      background-color: @syntax-selection-color;
   }


   .region.bracket-matcher {
      background-color: @transparent-white-1;
   }

   // Common tokens

   .source {
      color: @white;
   }

   .comment,
   .source.embedded .comment {
      color: @faded-blue;
   }

   .entity,
   .variable {
      color: @white;
   }

   .keyword.control,
   .keyword.other,
   .keyword.operator,
   .storage {
      color: @pink;
   }

   .constant,
   .keyword.unit,
   .string {
      color: @green;
   }

   .source .string {

      .source,
      .meta.embedded.line {
         color: @green;
      }

      .punctuation.section.embedded {
         color: @green;

         .source {
            color: @green;
         }
      }
   }

   // Language-specific tokens

   .c {

      &.storage.type {
         color: @pink;
      }
   }

   .coffee {

      &.function {

         &.support {
            color: @pink;

            &.console {
               color: @faded-white;
            }
         }

         &.storage.type {
            color: @pink;
         }
      }
   }

   .css {

      &.support.type.property-name {
         color: @pink;
      }

      &.pseudo-class,
      &.entity.name.tag {
         color: @faded-white;
      }
   }

   .gfm {

      &.heading {
         color: @pink;
      }

      &.comment.quote {
         color: @faded-white;
      }
   }

   .html {

      &.entity.other.attribute-name {
         color: @pink;
      }

      &.meta.tag.doctype,
      &.entity.name.tag,
      &.punctuation.tag {
         color: @faded-white;
      }
   }

   .java {

      &.storage {

         &.type {
            color: @faded-white;

            &.primitive {
               color: @pink;
            }
         }

         &.modifier.import {
            color: @green;
         }
      }
   }

   .less {

      // & operator doesn't work here
      .keyword.operator {
         color: @white;
      }

      .keyword.control.html.elements {
         color: @faded-white;
      }
   }

   .python {

      &.keyword.operator.logical {
         color: @pink;
      }
   }

   .scss {

      &.entity.name.tag {
         color: @faded-white;
      }

      &.property-name {
         color: @pink;
      }
   }
}
